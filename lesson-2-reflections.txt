What happens when you initialize a repository? Why do you need to do it?

	When I run "git init" command in my folder to initialize my repository,
	it creates a hidden folder called ".git". This hidden folder contains all
	the information about my repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	As agreed before, it is not necessary to put all the chnaged files in the
	repository as a commit, as the commit should contains only one logical change.
	And, here comes the staging area. We add to the staging area only the files
	that we need to bind together in one commit. Then, we commit the files in the
	staging area as one shot.

How can you use the staging area to make sure you have one commit per logical
change?

	Using staging area, I can add to it only the files that hold one logical change,
	and leave the other unrelated changed files. Then,  i will be able to add the 
	related files only in one single commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	One of the very famous example of using branches is when I want to start
	developing a new feature while keeping the main application as it is so that
	I can fix bugs on the main branch.

How do the diagrams help you visualize the branch structure?

	When I can visualize the branch structure, I can recoginize the parent node
	of my branch with respect to the master for example. Also, I can specify 
	if I need to create a new branch from a previous commit.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	When we merge two branches together, we create a new commit that contains
	all changes exist in both branches. Accordingly the new commit will have two 
	parent commits: the two commits of the two branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Well, I think that git behaves wisely in choosing the merge strategy. Normally,
	when it faces conflict, it is much easier to ask the authers to resolve their 
	conflict between them instead of letting git guess to solve it.
